Sujet mail NF17 Groupe 4
écrire les contraintes, les clef candidates, ex un restaurant a une seule carte a la fois et les deux dates ne se chevauchent pas

Tous les attributs où ce n’est pas spécifié NULLABLE sont NOT NULL.

Restaurants (#idRestaurant: int, nomRestaurant: string, adresse:string, ville:string, pays:string,)
	Contraintes: (nomRestaurant, adresse, ville, pays) clé candidate

Cuisiniers (#idEmploye: int, spécialité: string, nom: string, prénom: string, dateNaissance: date, dateAnciennete: date, idRestaurant=>Restaurants: int)
	Contraintes: (nom, prénom, dateNaissance) clé candidate

Managers (#idEmploye: int, nom: string, prénom: string, dateNaissance: date, dateAnciennete: date, idRestaurant=>Restaurants: int) 
	Contraintes: (nom, prénom, dateNaissance) clé candidate

Serveurs (#idEmploye: int, authorisationAccueil: boolean, nom: string, prénom: string, dateNaissance: date, dateAnciennete: date, idRestaurant=>Restaurants: int) 
	Contraintes: (nom, prénom, dateNaissance) clé candidate
	
	Héritage (Cuisiniers, Managers, Serveurs): Nous avons choisi un héritage par classes filles car on est face à un héritage exclusif, chaque employé ne pouvant avoir deux emplois différents. La classe Employé n'ayant qu'un lien 1 - 1..* avec Restaurant, nous ne rencontrons pas de problème de redondance.

Elements (#idElement: int)
	Héritage: Nous avons choisi un héritage par références car celà nous permet de factoriser les liens entre les tables. L'inconvénient du temps de requête plus conséquent n'est pas assez grand pour être significatif.

Menus (#idElement=>Elements:int, nomMenu: string)

Plats (#idElement=>Elements: int, nomPlat: string, catégorie: string, entree: boolean, plat: boolean, dessert: boolean)

BoissonsOffertes (#idElement=>Elements: int, nomBoisson=>Boissons: string, volumeDecilitres: decimal, anneeProduction: int)
	Contraintes :
	- anneeProduction NULLABLE
	- volumeDecilitres > 0

Boissons (#nomBoisson: string, type: string)

Ingredients (#nomIngredient: string, liquide: boolean)
	Héritage: Nous avons choisi un héritage par classe mère car les classes filles Liquide et Solide n'ont pas d'attributs, on a donc un héritage complet.
	
Cartes (#idCarte: int, nomCarte: string)

Commandes (#idCommande: int, #idRestaurant=>Restaurants: int, dateCommande: date)
	
PeriodesCartes (#idCarte=>Cartes: int, #idRestaurant=>Restaurants: int, #dateDebut: date, dateFin: date)
	Contraintes:
	- dateDebut < dateFin
	- On ne peut pas modéliser la contrainte suivante: Un restaurant a une seule carte a la fois par période. C’est à dire que deux périodes de deux cartes différentes ne peuvent pas se chevaucher pour un même restaurant.

QuantitesElements (#idElement=>Elements: int, #idCarte=>Cartes: int, quantiteElement :int)
	Contraintes: quantiteElement > 0

PrixElements (#idElement=>Elements: int, #idCarte=>Cartes: int, prixElement: decimal)
	Contraintes: prixElement > 0

AssocMenusPlats (#idMenu=>Menus: int,#idPlat=>Plats: int)

QuantitesIngredients (#nomIngredient=>Ingredients: string, #idElement=>Plats :int, quantiteIngredient: int)
	Contraintes: quantiteIngredient > 0